"""The root of all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  GetUserQuery(username: String!): User
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  fullname: String
  username: String!
  email: String!
  biography: String
  avatarUrl: String
  followers(after: String, first: Int, before: String, last: Int): UserConnection!
  following(after: String, first: Int, before: String, last: Int): UserConnection!
  followers_count: Int!
  following_count: Int!
  posts_count: Int!
  followed_by_viewer: Boolean!
}

"""A connection to a list of items."""
type UserConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: String!
}

"""The root of all mutations"""
type Mutation {
  CreateUserMutation(input: CreateUserInput!): CreateUserPayload
  UserUpdateMutation(input: UpdateUserInput!): UpdateUserPayload

  """Create or update user avatar"""
  UserAvatarUpdateMutation(input: UpdateUserAvatarInput!): UpdateUserAvatarPayload

  """Delete user avatar"""
  UserAvatarDeleteMutation(input: DeleteUserAvatarInput!): DeleteUserAvatarPayload
  AuthLoginMutation(input: LoginUserInput!): LoginUserPayload
  AuthLogoutMutation(input: LogoutUserInput!): LogoutUserPayload
  AuthRefreshTokenMutation(input: RefreshTokenInput!): RefreshTokenPayload
}

type CreateUserPayload {
  user: User
  error: String
  clientMutationId: String
}

input CreateUserInput {
  email: String!
  fullname: String
  username: String!
  password: String!
  clientMutationId: String
}

type UpdateUserPayload {
  user: User
  error: String
  clientMutationId: String
}

input UpdateUserInput {
  id: ID!
  fullname: String
  biography: String
  clientMutationId: String
}

type UpdateUserAvatarPayload {
  user: User
  error: String
  clientMutationId: String
}

input UpdateUserAvatarInput {
  id: ID!
  file: Upload
  clientMutationId: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type DeleteUserAvatarPayload {
  user: User
  error: String
  clientMutationId: String
}

input DeleteUserAvatarInput {
  id: ID!
  clientMutationId: String
}

type LoginUserPayload {
  token: Auth
  clientMutationId: String
}

"""Auth data"""
type Auth implements Node {
  """The ID of an object"""
  id: ID!
  user: User
  accessToken: String
  refreshToken: String
  expiresDate: String
}

input LoginUserInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LogoutUserPayload {
  deletedUserId: String
  clientMutationId: String
}

input LogoutUserInput {
  clientMutationId: String
}

type RefreshTokenPayload {
  accessToken: String
  clientMutationId: String
}

input RefreshTokenInput {
  refreshToken: String!
  clientMutationId: String
}